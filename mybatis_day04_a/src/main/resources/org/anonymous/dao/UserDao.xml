<?xml version="1.0" encoding="UTF-8" ?>

<!--引入约束-->
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.anonymous.dao.UserDao">

<!--在本页面引入 二级缓存机制: 需要开启二级缓存的 sql 语句 需要设置属性 : useCache="true"  -->
	<cache/>

	<!--根据 uid 查询用户: 被 account 引去:  开启二级缓存-->
	<select id="findUserById" resultType="user" parameterType="int" useCache="true">
		select * from user where id = #{随便写也是uid}
	</select>

	<!--查询所有用户: resultType="user"
	   查询所有用户, 延迟加载用户的账户: resultMap="userLazy"
	-->
	<select id="findUsers" resultMap="userLazy">
		select * from user
	</select>
	
	<resultMap id="userLazy" type="org.anonymous.domain.User">
		<!-- 实例化时注入构造方法.
		  属性:
		   idArg: ID 参数, 标记出作为 ID 的结果可以帮助提高整体性能.
		   arg: 将被注入到构造方法的一个普通结果.
		-->
		<!--<constructor>
			<arg column="id" javaType="int"/>
		</constructor>-->
		<!--user自己的属性-->
		<!--
		  id: 一个 ID 结果, 标记出作为 ID 的结果可以帮助提高整体性能.
		  result: 注入到字段或 JavaBean 属性的普通结果.
		-->
		<id property="id" column="id"/>
		<result property="username" column="username"/>
		<result property="sex" column="sex"/>
		<result property="birthday" column="birthday"/>
		<result property="address" column="address"/>
		<!--配置关联 集合 数据来源:
		select : 关联 sql 来源 - namespace.id (接口名.方法名)
		column: 被引入的 sql 所需的参数 对应的 主类(user)中的 字段名

		javaType: 集合类型
		ofType: 集合泛型
		-->
		<collection property="accounts" javaType="list" ofType="account" select="org.anonymous.dao.AccountDao.findAccountByUId" column="id"/>
	</resultMap>

</mapper>