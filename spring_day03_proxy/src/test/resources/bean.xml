<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--service: 目标对象(被代理对象)-->
    <bean id="userService" class="org.anonymous.service.UserServiceImpl"/>
    <!--自定义的切面类： 里面都是 通知（增强方法）-->
    <bean id="aspect" class="org.anonymous.aspect.Aspect1"/>
    <!--告诉 spring 自己的 哪些通知要在目标对象的 哪个方法上执行 -->
    <aop:config>
        <!--也可以定义在外面-->
        <!--<aop:pointcut id="pt" expression="execution(* org.anonymous..*.*(..))"/>-->
        <!--引入 切面类-->
        <aop:aspect ref="aspect">
            <!--切入点的抽取: expression="execution(public void org.anonymous.service.UserServiceImpl.save())"
                 execution() 表达式
                 public: 修饰符,可以省略不写
                 void: 返回值
                 全限定名
                 方法名
                 (..) : 参数

               表达式的写法: 方式二
                 *: 通配符(代表所有)   一个星号只能代表 整个 表达式结构中的一个元素
                 ..: 如果是参数, 代表参数可有可无
                 ..: 如果是包,代表当前包下所有子包

                 eg: * org.anonymous.*.*(..)
                    返回值 包        类名 方法名
            -->
            <!--org.anonymous 包下的 所有子包, 下的 任意类的 任意方法-->
            <aop:pointcut id="pt" expression="execution(* org.anonymous..*.*(..))"/>
            <!--指明哪一个 类的 哪个方法为 切入点-->
            <!--<aop:pointcut id="pt" expression="execution(public void org.anonymous.service.UserServiceImpl.save(..))"/>-->

            <!--通知的执行顺序 与 这里定义的顺序有关: before 一定会先执行, 切入点 一定会在 紧接着 before 后面执行
                    after 和 after-returning 的执行顺序不固定
            -->
            <!--after 和 after-returning 谁放在前面,谁先执行-->
            <!--最终： 无论如何都会执行（但不一定是最后执行）-->
            <aop:after method="after" pointcut-ref="pt"/>
            <!--切入点异常时： 该 通知不会执行（后置通知）-->
            <aop:after-returning method="afterReturning" pointcut-ref="pt"/>
            <!--异常-->
            <aop:after-throwing method="afterException" pointcut-ref="pt"/>

            <!--环绕: 一般不会与 其他 四个 通知一起使用-->
            <!--<aop:around method="around" pointcut-ref="pt"/>-->
            <!--无论 before 定义在哪,都是最先执行-->
            <aop:before method="before" pointcut-ref="pt"/>

        </aop:aspect>
    </aop:config>

</beans>